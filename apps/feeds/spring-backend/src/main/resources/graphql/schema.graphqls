scalar LocalDateTime

type Article {
  id: ID!
  link: String!
  title: String!
  author: String!
  content: String!
  publishedDate: LocalDateTime!
  feed: Feed!
  unread: Boolean!
}

input ArticleFilterCriteria {
  feedIds: [ID!]
  offset: Int
  limit: Int
}

type Feed {
  id: ID!
  uri: String!
  title: String!
  icon: String
  articles(unread: Boolean, offset: Int, limit: Int): [Article!]!
  group: Group
  unreadCount: Int
  totalCount: Int
  hasFetchError: Boolean!
}

input FeedInput {
  uri: String!
  title: String
}

type Group {
  id: ID!
  name: String!
  feeds: [Feed!]!
}

input GroupInput {
  name: String!
}

type Token {
  access_token: String!
  refresh_token: String!
  scope: String!
  token_type: String!
}

type User {
  username: String!
  name: String
  avatar_url: String
  email: String
}

type Query {
  articles(filter: ArticleFilterCriteria!): [Article!]!
  feeds: [Feed!]!
  groups: [Group!]!
  authorizationUri: String!
  login(code: String!): Token
  me: User
}

type Mutation {
  addFeed(feed: FeedInput!): Feed
  deleteFeed(feedId: ID!): Boolean!
  addGroup(group: GroupInput!): Group
  addFeedToGroup(feedId: ID!, groupId: ID!): Group!
  toggleArticleUnread(id: ID!): Article!
}

type Subscription {
  feed: Feed
}
