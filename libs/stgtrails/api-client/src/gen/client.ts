/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * stgtrails API
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { customAxiosInstance } from '../custom-axios'
export type GetWeatherDataForTrailAreaParams = {
  trailAreaId: number
  hours?: number
  utcOffsetHours?: number
}

export type GetSunriseSunsetForTrailAreaParams = {
  trailAreaId: number
  days?: number
}

export type GetHealthStatus503Details = {
  [key: string]: {
    status: string
    [key: string]: unknown
  }
}

/**
 * @nullable
 */
export type GetHealthStatus503Error = {
  [key: string]: {
    status: string
    [key: string]: unknown
  }
} | null

/**
 * @nullable
 */
export type GetHealthStatus503Info = {
  [key: string]: {
    status: string
    [key: string]: unknown
  }
} | null

export type GetHealthStatus503 = {
  status?: string
  /** @nullable */
  info?: GetHealthStatus503Info
  /** @nullable */
  error?: GetHealthStatus503Error
  details?: GetHealthStatus503Details
}

export type GetHealthStatus200Details = {
  [key: string]: {
    status: string
    [key: string]: unknown
  }
}

/**
 * @nullable
 */
export type GetHealthStatus200Error = {
  [key: string]: {
    status: string
    [key: string]: unknown
  }
} | null

/**
 * @nullable
 */
export type GetHealthStatus200Info = {
  [key: string]: {
    status: string
    [key: string]: unknown
  }
} | null

export type GetHealthStatus200 = {
  status?: string
  /** @nullable */
  info?: GetHealthStatus200Info
  /** @nullable */
  error?: GetHealthStatus200Error
  details?: GetHealthStatus200Details
}

export interface WeatherDataResponseDto {
  time: string
  temperature2m: number
  rain: number
  soilMoisture0To1cm: number
  soilMoisture1To3cm: number
  soilMoisture3To9cm: number
  soilMoisture9To27cm: number
  soilTemperature0cm: number
  soilTemperature6cm: number
  windGusts10m: number
}

export interface TrailUpdateDto {
  name: string
}

export interface TrailResponseDto {
  id: number
  name: string
  trailAreaId: number
}

export interface TrailCreateDto {
  name: string
}

export interface TrailAreaUpdateDto {
  name: string
  /**
   * @minimum -90
   * @maximum 90
   */
  latitude: number
  /**
   * @minimum -180
   * @maximum 180
   */
  longitude: number
  /**
   * @minimum 0
   * @maximum 1
   */
  threshold: number
}

export interface TrailAreaResponseDto {
  id: number
  name: string
  latitude: number
  longitude: number
  threshold: number
}

export interface TrailAreaCreateDto {
  name: string
  /**
   * @minimum -90
   * @maximum 90
   */
  latitude: number
  /**
   * @minimum -180
   * @maximum 180
   */
  longitude: number
  /**
   * @minimum 0
   * @maximum 1
   */
  threshold?: number
}

export interface SunriseSunsetResponseDto {
  date: string
  sunrise: string
  sunset: string
}

export const getHealthStatus = (signal?: AbortSignal) => {
  return customAxiosInstance<GetHealthStatus200>({ url: `/api/health`, method: 'GET', signal })
}

export const getGetHealthStatusQueryKey = () => {
  return [`/api/health`] as const
}

export const getGetHealthStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getHealthStatus>>,
  TError = GetHealthStatus503,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthStatus>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetHealthStatusQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthStatus>>> = ({ signal }) => getHealthStatus(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHealthStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getHealthStatus>>>
export type GetHealthStatusQueryError = GetHealthStatus503

export function useGetHealthStatus<
  TData = Awaited<ReturnType<typeof getHealthStatus>>,
  TError = GetHealthStatus503,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthStatus>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getHealthStatus>>, TError, TData>, 'initialData'>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthStatus<
  TData = Awaited<ReturnType<typeof getHealthStatus>>,
  TError = GetHealthStatus503,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthStatus>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getHealthStatus>>, TError, TData>, 'initialData'>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealthStatus<
  TData = Awaited<ReturnType<typeof getHealthStatus>>,
  TError = GetHealthStatus503,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthStatus>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetHealthStatus<
  TData = Awaited<ReturnType<typeof getHealthStatus>>,
  TError = GetHealthStatus503,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthStatus>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetHealthStatusQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getSunriseSunsetForTrailArea = (params: GetSunriseSunsetForTrailAreaParams, signal?: AbortSignal) => {
  return customAxiosInstance<SunriseSunsetResponseDto[]>({ url: `/api/sunrise-sunset`, method: 'GET', params, signal })
}

export const getGetSunriseSunsetForTrailAreaQueryKey = (params: GetSunriseSunsetForTrailAreaParams) => {
  return [`/api/sunrise-sunset`, ...(params ? [params] : [])] as const
}

export const getGetSunriseSunsetForTrailAreaQueryOptions = <
  TData = Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>,
  TError = unknown,
>(
  params: GetSunriseSunsetForTrailAreaParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSunriseSunsetForTrailAreaQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>> = ({ signal }) =>
    getSunriseSunsetForTrailArea(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSunriseSunsetForTrailAreaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>
>
export type GetSunriseSunsetForTrailAreaQueryError = unknown

export function useGetSunriseSunsetForTrailArea<
  TData = Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>,
  TError = unknown,
>(
  params: GetSunriseSunsetForTrailAreaParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>, TError, TData>,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSunriseSunsetForTrailArea<
  TData = Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>,
  TError = unknown,
>(
  params: GetSunriseSunsetForTrailAreaParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>, TError, TData>,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSunriseSunsetForTrailArea<
  TData = Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>,
  TError = unknown,
>(
  params: GetSunriseSunsetForTrailAreaParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>, TError, TData>>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetSunriseSunsetForTrailArea<
  TData = Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>,
  TError = unknown,
>(
  params: GetSunriseSunsetForTrailAreaParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSunriseSunsetForTrailArea>>, TError, TData>>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSunriseSunsetForTrailAreaQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const createTrailArea = (trailAreaCreateDto: TrailAreaCreateDto, signal?: AbortSignal) => {
  return customAxiosInstance<TrailAreaResponseDto>({
    url: `/api/trailAreas`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: trailAreaCreateDto,
    signal,
  })
}

export const getCreateTrailAreaMutationOptions = <
  TData = Awaited<ReturnType<typeof createTrailArea>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: TrailAreaCreateDto }, TContext>
}) => {
  const mutationKey = ['createTrailArea']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTrailArea>>, { data: TrailAreaCreateDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return createTrailArea(data)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { data: TrailAreaCreateDto }, TContext>
}

export type CreateTrailAreaMutationResult = NonNullable<Awaited<ReturnType<typeof createTrailArea>>>
export type CreateTrailAreaMutationBody = TrailAreaCreateDto
export type CreateTrailAreaMutationError = unknown

export const useCreateTrailArea = <
  TData = Awaited<ReturnType<typeof createTrailArea>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: TrailAreaCreateDto }, TContext>
}): UseMutationResult<TData, TError, { data: TrailAreaCreateDto }, TContext> => {
  const mutationOptions = getCreateTrailAreaMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getTrailAreas = (signal?: AbortSignal) => {
  return customAxiosInstance<TrailAreaResponseDto[]>({ url: `/api/trailAreas`, method: 'GET', signal })
}

export const getGetTrailAreasQueryKey = () => {
  return [`/api/trailAreas`] as const
}

export const getGetTrailAreasQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrailAreas>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTrailAreasQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrailAreas>>> = ({ signal }) => getTrailAreas(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTrailAreas>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTrailAreasQueryResult = NonNullable<Awaited<ReturnType<typeof getTrailAreas>>>
export type GetTrailAreasQueryError = unknown

export function useGetTrailAreas<TData = Awaited<ReturnType<typeof getTrailAreas>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>, 'initialData'>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTrailAreas<TData = Awaited<ReturnType<typeof getTrailAreas>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>, 'initialData'>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTrailAreas<TData = Awaited<ReturnType<typeof getTrailAreas>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetTrailAreas<TData = Awaited<ReturnType<typeof getTrailAreas>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTrailAreasQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const updateTrailArea = (trailAreaId: number, trailAreaUpdateDto: TrailAreaUpdateDto) => {
  return customAxiosInstance<TrailAreaResponseDto>({
    url: `/api/trailAreas/${trailAreaId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: trailAreaUpdateDto,
  })
}

export const getUpdateTrailAreaMutationOptions = <
  TData = Awaited<ReturnType<typeof updateTrailArea>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailAreaId: number; data: TrailAreaUpdateDto }, TContext>
}) => {
  const mutationKey = ['updateTrailArea']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTrailArea>>,
    { trailAreaId: number; data: TrailAreaUpdateDto }
  > = (props) => {
    const { trailAreaId, data } = props ?? {}

    return updateTrailArea(trailAreaId, data)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { trailAreaId: number; data: TrailAreaUpdateDto },
    TContext
  >
}

export type UpdateTrailAreaMutationResult = NonNullable<Awaited<ReturnType<typeof updateTrailArea>>>
export type UpdateTrailAreaMutationBody = TrailAreaUpdateDto
export type UpdateTrailAreaMutationError = unknown

export const useUpdateTrailArea = <
  TData = Awaited<ReturnType<typeof updateTrailArea>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailAreaId: number; data: TrailAreaUpdateDto }, TContext>
}): UseMutationResult<TData, TError, { trailAreaId: number; data: TrailAreaUpdateDto }, TContext> => {
  const mutationOptions = getUpdateTrailAreaMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteTrailArea = (trailAreaId: number) => {
  return customAxiosInstance<void>({ url: `/api/trailAreas/${trailAreaId}`, method: 'DELETE' })
}

export const getDeleteTrailAreaMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteTrailArea>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailAreaId: number }, TContext>
}) => {
  const mutationKey = ['deleteTrailArea']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTrailArea>>, { trailAreaId: number }> = (
    props,
  ) => {
    const { trailAreaId } = props ?? {}

    return deleteTrailArea(trailAreaId)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { trailAreaId: number }, TContext>
}

export type DeleteTrailAreaMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTrailArea>>>

export type DeleteTrailAreaMutationError = unknown

export const useDeleteTrailArea = <
  TData = Awaited<ReturnType<typeof deleteTrailArea>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailAreaId: number }, TContext>
}): UseMutationResult<TData, TError, { trailAreaId: number }, TContext> => {
  const mutationOptions = getDeleteTrailAreaMutationOptions(options)

  return useMutation(mutationOptions)
}

export const createTrail = (trailAreaId: number, trailCreateDto: TrailCreateDto, signal?: AbortSignal) => {
  return customAxiosInstance<TrailResponseDto>({
    url: `/api/trailAreas/${trailAreaId}/trails`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: trailCreateDto,
    signal,
  })
}

export const getCreateTrailMutationOptions = <
  TData = Awaited<ReturnType<typeof createTrail>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailAreaId: number; data: TrailCreateDto }, TContext>
}) => {
  const mutationKey = ['createTrail']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTrail>>,
    { trailAreaId: number; data: TrailCreateDto }
  > = (props) => {
    const { trailAreaId, data } = props ?? {}

    return createTrail(trailAreaId, data)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { trailAreaId: number; data: TrailCreateDto },
    TContext
  >
}

export type CreateTrailMutationResult = NonNullable<Awaited<ReturnType<typeof createTrail>>>
export type CreateTrailMutationBody = TrailCreateDto
export type CreateTrailMutationError = unknown

export const useCreateTrail = <
  TData = Awaited<ReturnType<typeof createTrail>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailAreaId: number; data: TrailCreateDto }, TContext>
}): UseMutationResult<TData, TError, { trailAreaId: number; data: TrailCreateDto }, TContext> => {
  const mutationOptions = getCreateTrailMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getTrailsOfArea = (trailAreaId: number, signal?: AbortSignal) => {
  return customAxiosInstance<TrailResponseDto[]>({
    url: `/api/trailAreas/${trailAreaId}/trails`,
    method: 'GET',
    signal,
  })
}

export const getGetTrailsOfAreaQueryKey = (trailAreaId: number) => {
  return [`/api/trailAreas/${trailAreaId}/trails`] as const
}

export const getGetTrailsOfAreaQueryOptions = <TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTrailsOfAreaQueryKey(trailAreaId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrailsOfArea>>> = ({ signal }) =>
    getTrailsOfArea(trailAreaId, signal)

  return { queryKey, queryFn, enabled: !!trailAreaId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTrailsOfArea>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetTrailsOfAreaQueryResult = NonNullable<Awaited<ReturnType<typeof getTrailsOfArea>>>
export type GetTrailsOfAreaQueryError = unknown

export function useGetTrailsOfArea<TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>, 'initialData'>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTrailsOfArea<TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>, 'initialData'>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetTrailsOfArea<TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetTrailsOfArea<TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetTrailsOfAreaQueryOptions(trailAreaId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const updateTrail = (trailId: number, trailUpdateDto: TrailUpdateDto) => {
  return customAxiosInstance<void>({
    url: `/api/trailAreas/trails/${trailId}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: trailUpdateDto,
  })
}

export const getUpdateTrailMutationOptions = <
  TData = Awaited<ReturnType<typeof updateTrail>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailId: number; data: TrailUpdateDto }, TContext>
}) => {
  const mutationKey = ['updateTrail']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTrail>>,
    { trailId: number; data: TrailUpdateDto }
  > = (props) => {
    const { trailId, data } = props ?? {}

    return updateTrail(trailId, data)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { trailId: number; data: TrailUpdateDto },
    TContext
  >
}

export type UpdateTrailMutationResult = NonNullable<Awaited<ReturnType<typeof updateTrail>>>
export type UpdateTrailMutationBody = TrailUpdateDto
export type UpdateTrailMutationError = unknown

export const useUpdateTrail = <
  TData = Awaited<ReturnType<typeof updateTrail>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailId: number; data: TrailUpdateDto }, TContext>
}): UseMutationResult<TData, TError, { trailId: number; data: TrailUpdateDto }, TContext> => {
  const mutationOptions = getUpdateTrailMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deleteTrail = (trailId: number) => {
  return customAxiosInstance<void>({ url: `/api/trailAreas/trails/${trailId}`, method: 'DELETE' })
}

export const getDeleteTrailMutationOptions = <
  TData = Awaited<ReturnType<typeof deleteTrail>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailId: number }, TContext>
}) => {
  const mutationKey = ['deleteTrail']
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTrail>>, { trailId: number }> = (props) => {
    const { trailId } = props ?? {}

    return deleteTrail(trailId)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { trailId: number }, TContext>
}

export type DeleteTrailMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTrail>>>

export type DeleteTrailMutationError = unknown

export const useDeleteTrail = <
  TData = Awaited<ReturnType<typeof deleteTrail>>,
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { trailId: number }, TContext>
}): UseMutationResult<TData, TError, { trailId: number }, TContext> => {
  const mutationOptions = getDeleteTrailMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getWeatherDataForTrailArea = (params: GetWeatherDataForTrailAreaParams, signal?: AbortSignal) => {
  return customAxiosInstance<WeatherDataResponseDto[]>({ url: `/api/weather`, method: 'GET', params, signal })
}

export const getGetWeatherDataForTrailAreaQueryKey = (params: GetWeatherDataForTrailAreaParams) => {
  return [`/api/weather`, ...(params ? [params] : [])] as const
}

export const getGetWeatherDataForTrailAreaQueryOptions = <
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  params: GetWeatherDataForTrailAreaParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWeatherDataForTrailAreaQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>> = ({ signal }) =>
    getWeatherDataForTrailArea(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWeatherDataForTrailAreaQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>>
export type GetWeatherDataForTrailAreaQueryError = unknown

export function useGetWeatherDataForTrailArea<
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  params: GetWeatherDataForTrailAreaParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWeatherDataForTrailArea<
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  params: GetWeatherDataForTrailAreaParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWeatherDataForTrailArea<
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  params: GetWeatherDataForTrailAreaParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetWeatherDataForTrailArea<
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  params: GetWeatherDataForTrailAreaParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetWeatherDataForTrailAreaQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
