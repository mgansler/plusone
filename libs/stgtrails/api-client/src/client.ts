/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * stgtrails API
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { customAxiosInstance } from './custom-axios'
export type GetWeatherDataForTrailAreaParams = {
  hours?: number
}

export interface WeatherDataResponseDto {
  rain: number
  soilMoisture0To1cm: number
  soilMoisture1To3cm: number
  soilMoisture3To9cm: number
  soilMoisture9To27cm: number
  temperature2m: number
  time: string
}

export interface TrailResponseDto {
  id: number
  name: string
  trailAreaId: number
}

export interface TrailCreateDto {
  name: string
}

export interface TrailAreaResponseDto {
  id: number
  latitude: number
  longitude: number
  name: string
}

export interface TrailAreaCreateDto {
  latitude: number
  longitude: number
  name: string
}

export const createTrailArea = (trailAreaCreateDto: TrailAreaCreateDto) => {
  return customAxiosInstance<TrailAreaResponseDto>({
    url: `/api/trailAreas`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: trailAreaCreateDto,
  })
}

export const getCreateTrailAreaMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTrailArea>>,
    TError,
    { data: TrailAreaCreateDto },
    TContext
  >
}): UseMutationOptions<Awaited<ReturnType<typeof createTrailArea>>, TError, { data: TrailAreaCreateDto }, TContext> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTrailArea>>, { data: TrailAreaCreateDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return createTrailArea(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateTrailAreaMutationResult = NonNullable<Awaited<ReturnType<typeof createTrailArea>>>
export type CreateTrailAreaMutationBody = TrailAreaCreateDto
export type CreateTrailAreaMutationError = unknown

export const useCreateTrailArea = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTrailArea>>,
    TError,
    { data: TrailAreaCreateDto },
    TContext
  >
}): UseMutationResult<Awaited<ReturnType<typeof createTrailArea>>, TError, { data: TrailAreaCreateDto }, TContext> => {
  const mutationOptions = getCreateTrailAreaMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getTrailAreas = (signal?: AbortSignal) => {
  return customAxiosInstance<TrailAreaResponseDto[]>({ url: `/api/trailAreas`, method: 'GET', signal })
}

export const getGetTrailAreasQueryKey = () => {
  return [`/api/trailAreas`] as const
}

export const getGetTrailAreasQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrailAreas>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTrailAreasQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrailAreas>>> = ({ signal }) => getTrailAreas(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTrailAreas>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetTrailAreasQueryResult = NonNullable<Awaited<ReturnType<typeof getTrailAreas>>>
export type GetTrailAreasQueryError = unknown

export function useGetTrailAreas<TData = Awaited<ReturnType<typeof getTrailAreas>>, TError = unknown>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>, 'initialData'>
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTrailAreas<TData = Awaited<ReturnType<typeof getTrailAreas>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>, 'initialData'>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTrailAreas<TData = Awaited<ReturnType<typeof getTrailAreas>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetTrailAreas<TData = Awaited<ReturnType<typeof getTrailAreas>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailAreas>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTrailAreasQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const createTrail = (trailAreaId: number, trailCreateDto: TrailCreateDto) => {
  return customAxiosInstance<TrailResponseDto>({
    url: `/api/trailAreas/${trailAreaId}/trails`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: trailCreateDto,
  })
}

export const getCreateTrailMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTrail>>,
    TError,
    { trailAreaId: number; data: TrailCreateDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTrail>>,
  TError,
  { trailAreaId: number; data: TrailCreateDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTrail>>,
    { trailAreaId: number; data: TrailCreateDto }
  > = (props) => {
    const { trailAreaId, data } = props ?? {}

    return createTrail(trailAreaId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateTrailMutationResult = NonNullable<Awaited<ReturnType<typeof createTrail>>>
export type CreateTrailMutationBody = TrailCreateDto
export type CreateTrailMutationError = unknown

export const useCreateTrail = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTrail>>,
    TError,
    { trailAreaId: number; data: TrailCreateDto },
    TContext
  >
}): UseMutationResult<
  Awaited<ReturnType<typeof createTrail>>,
  TError,
  { trailAreaId: number; data: TrailCreateDto },
  TContext
> => {
  const mutationOptions = getCreateTrailMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getTrailsOfArea = (trailAreaId: number, signal?: AbortSignal) => {
  return customAxiosInstance<TrailResponseDto[]>({
    url: `/api/trailAreas/${trailAreaId}/trails`,
    method: 'GET',
    signal,
  })
}

export const getGetTrailsOfAreaQueryKey = (trailAreaId: number) => {
  return [`/api/trailAreas/${trailAreaId}/trails`] as const
}

export const getGetTrailsOfAreaQueryOptions = <TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetTrailsOfAreaQueryKey(trailAreaId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTrailsOfArea>>> = ({ signal }) =>
    getTrailsOfArea(trailAreaId, signal)

  return { queryKey, queryFn, enabled: !!trailAreaId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTrailsOfArea>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetTrailsOfAreaQueryResult = NonNullable<Awaited<ReturnType<typeof getTrailsOfArea>>>
export type GetTrailsOfAreaQueryError = unknown

export function useGetTrailsOfArea<TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>, 'initialData'>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTrailsOfArea<TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>, 'initialData'>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTrailsOfArea<TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetTrailsOfArea<TData = Awaited<ReturnType<typeof getTrailsOfArea>>, TError = unknown>(
  trailAreaId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTrailsOfArea>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTrailsOfAreaQueryOptions(trailAreaId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getWeatherDataForTrailArea = (
  trailAreaId: number,
  params?: GetWeatherDataForTrailAreaParams,
  signal?: AbortSignal,
) => {
  return customAxiosInstance<WeatherDataResponseDto[]>({
    url: `/api/trailAreas/${trailAreaId}/weather`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetWeatherDataForTrailAreaQueryKey = (
  trailAreaId: number,
  params?: GetWeatherDataForTrailAreaParams,
) => {
  return [`/api/trailAreas/${trailAreaId}/weather`, ...(params ? [params] : [])] as const
}

export const getGetWeatherDataForTrailAreaQueryOptions = <
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  trailAreaId: number,
  params?: GetWeatherDataForTrailAreaParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWeatherDataForTrailAreaQueryKey(trailAreaId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>> = ({ signal }) =>
    getWeatherDataForTrailArea(trailAreaId, params, signal)

  return { queryKey, queryFn, enabled: !!trailAreaId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetWeatherDataForTrailAreaQueryResult = NonNullable<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>>
export type GetWeatherDataForTrailAreaQueryError = unknown

export function useGetWeatherDataForTrailArea<
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  trailAreaId: number,
  params: undefined | GetWeatherDataForTrailAreaParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>,
        'initialData'
      >
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetWeatherDataForTrailArea<
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  trailAreaId: number,
  params?: GetWeatherDataForTrailAreaParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>,
        'initialData'
      >
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetWeatherDataForTrailArea<
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  trailAreaId: number,
  params?: GetWeatherDataForTrailAreaParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useGetWeatherDataForTrailArea<
  TData = Awaited<ReturnType<typeof getWeatherDataForTrailArea>>,
  TError = unknown,
>(
  trailAreaId: number,
  params?: GetWeatherDataForTrailAreaParams,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeatherDataForTrailArea>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetWeatherDataForTrailAreaQueryOptions(trailAreaId, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
