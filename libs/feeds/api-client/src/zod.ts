/**
 * Generated by orval v6.22.0 üç∫
 * Do not edit manually.
 * Feeds API
 * OpenAPI spec version: 0.1
 */
import { z as zod } from 'zod'

export const markArticlesReadQueryParams = zod.object({
  s: zod.string().optional(),
  f: zod.string().optional(),
})

export const toggleUnreadParams = zod.object({
  articleId: zod.string(),
})

export const toggleUnreadBody = zod.object({
  unread: zod.boolean(),
})

export const toggleUnreadResponse = zod.object({
  article: zod.object({
    content: zod.string(),
    date: zod.string().datetime(),
    guid: zod.string(),
    id: zod.string(),
    link: zod.string(),
    title: zod.string(),
  }),
  cursor: zod.number(),
  starred: zod.boolean(),
  unread: zod.boolean(),
})

export const starArticleParams = zod.object({
  articleId: zod.string(),
})

export const starArticleBody = zod.object({
  starred: zod.boolean(),
})

export const findArticlesQueryParams = zod.object({
  s: zod.string().optional(),
  starred: zod.boolean().optional(),
  r: zod.boolean().optional(),
  sort: zod.enum(['desc', 'asc']).optional(),
  f: zod.string().optional(),
  cursor: zod.number().optional(),
})

export const findArticlesResponse = zod.object({
  content: zod.array(
    zod.object({
      article: zod.object({
        content: zod.string(),
        date: zod.string().datetime(),
        guid: zod.string(),
        id: zod.string(),
        link: zod.string(),
        title: zod.string(),
      }),
      cursor: zod.number(),
      starred: zod.boolean(),
      unread: zod.boolean(),
    }),
  ),
  pageSize: zod.number(),
  totalCount: zod.number(),
  unreadCount: zod.number(),
  lastCursor: zod.number().optional(),
})

export const loginBody = zod.object({
  username: zod.string(),
  password: zod.string(),
})

export const registerBody = zod.object({
  username: zod.string(),
  password: zod.string(),
})

export const profileResponse = zod.object({
  email: zod.string().optional(),
  id: zod.string(),
  isAdmin: zod.boolean(),
  username: zod.string(),
})

export const refreshResponse = zod.object({
  access_token: zod.string(),
  refresh_token: zod.string(),
})

export const bootInfoResponseAppVersionRegExp = new RegExp('^\\d\\.\\d+$')

export const bootInfoResponse = zod.object({
  appVersion: zod.string().regex(bootInfoResponseAppVersionRegExp),
  pageSize: zod.number(),
})

export const discoverFeedQueryParams = zod.object({
  url: zod.string(),
})

export const discoverFeedResponse = zod.object({
  feedUrl: zod.string(),
  title: zod.string(),
  url: zod.string(),
})

export const addFeedBody = zod.object({
  url: zod.string().optional(),
  title: zod.string(),
  feedUrl: zod.string(),
})

export const getFeedSettingsParams = zod.object({
  id: zod.string(),
})

export const getFeedSettingsResponse = zod.object({
  id: zod.string(),
  title: zod.string(),
  expandContent: zod.boolean(),
  includeRead: zod.boolean(),
  order: zod.enum(['desc', 'asc']),
})

export const updateFeedSettingsParams = zod.object({
  id: zod.string(),
})

export const updateFeedSettingsBody = zod.object({
  expandContent: zod.boolean(),
  includeRead: zod.boolean(),
  order: zod.enum(['desc', 'asc']),
  title: zod.string().optional(),
})

export const getFeedTagsParams = zod.object({
  id: zod.string(),
})

export const tagFeedParams = zod.object({
  id: zod.string(),
})

export const tagFeedBody = zod.object({
  tagId: zod.string(),
})

export const untagFeedParams = zod.object({
  id: zod.string(),
})

export const untagFeedBody = zod.object({
  tagId: zod.string(),
})

export const addTagBody = zod.object({
  name: zod.string(),
})

export const removeTagParams = zod.object({
  id: zod.string(),
})

export const healthControllerGetHealthStatusResponse = zod.object({
  status: zod.string().optional(),
  info: zod
    .record(
      zod.string(),
      zod.object({
        status: zod.string().optional(),
      }),
    )
    .nullish(),
  error: zod
    .record(
      zod.string(),
      zod.object({
        status: zod.string().optional(),
      }),
    )
    .nullish(),
  details: zod
    .record(
      zod.string(),
      zod.object({
        status: zod.string().optional(),
      }),
    )
    .optional(),
})

export const deleteUserParams = zod.object({
  userId: zod.any(),
})
