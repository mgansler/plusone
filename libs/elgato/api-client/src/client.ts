/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Elgato API
 * OpenAPI spec version: 0.1
 */
import { useQuery } from '@tanstack/react-query'
import type { UseQueryOptions, QueryFunction, UseQueryResult, QueryKey } from '@tanstack/react-query'
import { customAxiosInstance } from './custom-axios'
export interface DeviceResponseDto {
  id: string
  name: string
}

export interface DeviceListResponseDto {
  devices: DeviceResponseDto[]
}

export const deviceList = (signal?: AbortSignal) => {
  return customAxiosInstance<DeviceListResponseDto>({ url: `/api/devices`, method: 'get', signal })
}

export const getDeviceListQueryKey = () => [`/api/devices`] as const

export const getDeviceListQueryOptions = <TData = Awaited<ReturnType<typeof deviceList>>, TError = unknown>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof deviceList>>, TError, TData>
}): UseQueryOptions<Awaited<ReturnType<typeof deviceList>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getDeviceListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof deviceList>>> = ({ signal }) => deviceList(signal)

  return { queryKey, queryFn, ...queryOptions }
}

export type DeviceListQueryResult = NonNullable<Awaited<ReturnType<typeof deviceList>>>
export type DeviceListQueryError = unknown

export const useDeviceList = <TData = Awaited<ReturnType<typeof deviceList>>, TError = unknown>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof deviceList>>, TError, TData>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDeviceListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
