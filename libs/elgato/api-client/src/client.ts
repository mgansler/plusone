/**
 * Generated by orval v6.22.1 🍺
 * Do not edit manually.
 * Elgato API
 * OpenAPI spec version: 0.1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { customAxiosInstance } from './custom-axios'
export interface LocationDataResponseDto {
  dawn: string
  /** Time between sunrise and sunset in seconds. */
  dayLength: number
  dusk: string
  firstLight: string
  goldenHour: string
  lastLight: string
  latitude: number
  longitude: number
  name: string
  solarNoon: string
  sunrise: string
  sunset: string
  timeZone: string
  utcOffset: number
}

export interface LocationUpdateRequestDto {
  latitude: number
  longitude: number
  name: string
}

export type DevicePowerState = (typeof DevicePowerState)[keyof typeof DevicePowerState]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DevicePowerState = {
  on: 'on',
  off: 'off',
} as const

export interface GroupStateRequestDto {
  desiredPowerState: DevicePowerState
}

export interface GroupWithDevicesResponseDto {
  devices: DeviceDetailsResponseDto[]
  id: number
  isRoom: boolean
  name: string
}

export interface GroupListResponseDto {
  groups: GroupResponseDto[]
}

export interface GroupCreateDto {
  isRoom?: boolean
  name: string
}

export interface DeviceSettingsRequestDto {
  sunrise?: boolean
  sunset?: boolean
}

export interface DeviceSettingsResponseDto {
  sunrise: boolean
  sunset: boolean
}

export interface DeviceRemoveFromGroupRequestDto {
  groupId: number
}

export interface DeviceAddToGroupRequestDto {
  groupId: number
}

export interface TransitionToColorRequestDto {
  brightness: number
  hue: number
  saturation: number
}

export interface DevicePowerStateRequestDto {
  brightness?: number
  hue?: number
  on: boolean
  saturation?: number
}

export interface DeviceDisplayNameRequestDto {
  displayName: string
}

export interface DeviceState {
  brightness?: number
  hue?: number
  on: boolean
  saturation?: number
}

export type DeviceType = (typeof DeviceType)[keyof typeof DeviceType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeviceType = {
  RingLight: 'RingLight',
  LightStrip: 'LightStrip',
  Unknown: 'Unknown',
} as const

export interface ElgatoDeviceDetailsResponseDto {
  deviceType: DeviceType
  displayName: string
  productName: string
}

export interface GroupResponseDto {
  id: number
  isRoom: boolean
  name: string
}

export interface DeviceDetailsResponseDto {
  details: ElgatoDeviceDetailsResponseDto
  displayName: string
  groups: GroupResponseDto[]
  id: string
  lastSeen: string
  /** @deprecated */
  name: string
  state: DeviceState
}

export interface DeviceResponseDto {
  displayName: string
  id: string
  /** @deprecated */
  name: string
}

export interface DeviceListResponseDto {
  devices: DeviceResponseDto[]
}

export const deviceList = (signal?: AbortSignal) => {
  return customAxiosInstance<DeviceListResponseDto>({ url: `/api/devices`, method: 'GET', signal })
}

export const getDeviceListQueryKey = () => {
  return [`/api/devices`] as const
}

export const getDeviceListQueryOptions = <TData = Awaited<ReturnType<typeof deviceList>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceList>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getDeviceListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof deviceList>>> = ({ signal }) => deviceList(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof deviceList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type DeviceListQueryResult = NonNullable<Awaited<ReturnType<typeof deviceList>>>
export type DeviceListQueryError = unknown

export const useDeviceList = <TData = Awaited<ReturnType<typeof deviceList>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceList>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDeviceListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const deviceDetails = (id: string, signal?: AbortSignal) => {
  return customAxiosInstance<DeviceDetailsResponseDto>({ url: `/api/devices/${id}`, method: 'GET', signal })
}

export const getDeviceDetailsQueryKey = (id: string) => {
  return [`/api/devices/${id}`] as const
}

export const getDeviceDetailsQueryOptions = <TData = Awaited<ReturnType<typeof deviceDetails>>, TError = unknown>(
  id: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceDetails>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getDeviceDetailsQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof deviceDetails>>> = ({ signal }) => deviceDetails(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof deviceDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type DeviceDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof deviceDetails>>>
export type DeviceDetailsQueryError = unknown

export const useDeviceDetails = <TData = Awaited<ReturnType<typeof deviceDetails>>, TError = unknown>(
  id: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof deviceDetails>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDeviceDetailsQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const setDisplayName = (id: string, deviceDisplayNameRequestDto: DeviceDisplayNameRequestDto) => {
  return customAxiosInstance<void>({
    url: `/api/devices/${id}/display-name`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: deviceDisplayNameRequestDto,
  })
}

export const getSetDisplayNameMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setDisplayName>>,
    TError,
    { id: string; data: DeviceDisplayNameRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof setDisplayName>>,
  TError,
  { id: string; data: DeviceDisplayNameRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setDisplayName>>,
    { id: string; data: DeviceDisplayNameRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return setDisplayName(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetDisplayNameMutationResult = NonNullable<Awaited<ReturnType<typeof setDisplayName>>>
export type SetDisplayNameMutationBody = DeviceDisplayNameRequestDto
export type SetDisplayNameMutationError = unknown

export const useSetDisplayName = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setDisplayName>>,
    TError,
    { id: string; data: DeviceDisplayNameRequestDto },
    TContext
  >
}) => {
  const mutationOptions = getSetDisplayNameMutationOptions(options)

  return useMutation(mutationOptions)
}

export const toggleDevice = (id: string) => {
  return customAxiosInstance<void>({ url: `/api/devices/${id}/toggle`, method: 'PUT' })
}

export const getToggleDeviceMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof toggleDevice>>, TError, { id: string }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof toggleDevice>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof toggleDevice>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return toggleDevice(id)
  }

  return { mutationFn, ...mutationOptions }
}

export type ToggleDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof toggleDevice>>>

export type ToggleDeviceMutationError = unknown

export const useToggleDevice = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof toggleDevice>>, TError, { id: string }, TContext>
}) => {
  const mutationOptions = getToggleDeviceMutationOptions(options)

  return useMutation(mutationOptions)
}

export const deviceSetPowerState = (id: string, devicePowerStateRequestDto: DevicePowerStateRequestDto) => {
  return customAxiosInstance<void>({
    url: `/api/devices/${id}/power-state`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: devicePowerStateRequestDto,
  })
}

export const getDeviceSetPowerStateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deviceSetPowerState>>,
    TError,
    { id: string; data: DevicePowerStateRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deviceSetPowerState>>,
  TError,
  { id: string; data: DevicePowerStateRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deviceSetPowerState>>,
    { id: string; data: DevicePowerStateRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return deviceSetPowerState(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeviceSetPowerStateMutationResult = NonNullable<Awaited<ReturnType<typeof deviceSetPowerState>>>
export type DeviceSetPowerStateMutationBody = DevicePowerStateRequestDto
export type DeviceSetPowerStateMutationError = unknown

export const useDeviceSetPowerState = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deviceSetPowerState>>,
    TError,
    { id: string; data: DevicePowerStateRequestDto },
    TContext
  >
}) => {
  const mutationOptions = getDeviceSetPowerStateMutationOptions(options)

  return useMutation(mutationOptions)
}

export const transitionToColor = (id: string, transitionToColorRequestDto: TransitionToColorRequestDto) => {
  return customAxiosInstance<void>({
    url: `/api/devices/${id}/transition-to-color`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: transitionToColorRequestDto,
  })
}

export const getTransitionToColorMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transitionToColor>>,
    TError,
    { id: string; data: TransitionToColorRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof transitionToColor>>,
  TError,
  { id: string; data: TransitionToColorRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof transitionToColor>>,
    { id: string; data: TransitionToColorRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return transitionToColor(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type TransitionToColorMutationResult = NonNullable<Awaited<ReturnType<typeof transitionToColor>>>
export type TransitionToColorMutationBody = TransitionToColorRequestDto
export type TransitionToColorMutationError = unknown

export const useTransitionToColor = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof transitionToColor>>,
    TError,
    { id: string; data: TransitionToColorRequestDto },
    TContext
  >
}) => {
  const mutationOptions = getTransitionToColorMutationOptions(options)

  return useMutation(mutationOptions)
}

export const addDeviceToGroup = (id: string, deviceAddToGroupRequestDto: DeviceAddToGroupRequestDto) => {
  return customAxiosInstance<void>({
    url: `/api/devices/${id}/add-to-group`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: deviceAddToGroupRequestDto,
  })
}

export const getAddDeviceToGroupMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addDeviceToGroup>>,
    TError,
    { id: string; data: DeviceAddToGroupRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof addDeviceToGroup>>,
  TError,
  { id: string; data: DeviceAddToGroupRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addDeviceToGroup>>,
    { id: string; data: DeviceAddToGroupRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return addDeviceToGroup(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AddDeviceToGroupMutationResult = NonNullable<Awaited<ReturnType<typeof addDeviceToGroup>>>
export type AddDeviceToGroupMutationBody = DeviceAddToGroupRequestDto
export type AddDeviceToGroupMutationError = unknown

export const useAddDeviceToGroup = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addDeviceToGroup>>,
    TError,
    { id: string; data: DeviceAddToGroupRequestDto },
    TContext
  >
}) => {
  const mutationOptions = getAddDeviceToGroupMutationOptions(options)

  return useMutation(mutationOptions)
}

export const removeDeviceFromGroup = (id: string, deviceRemoveFromGroupRequestDto: DeviceRemoveFromGroupRequestDto) => {
  return customAxiosInstance<void>({
    url: `/api/devices/${id}/remove-from-group`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: deviceRemoveFromGroupRequestDto,
  })
}

export const getRemoveDeviceFromGroupMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeDeviceFromGroup>>,
    TError,
    { id: string; data: DeviceRemoveFromGroupRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeDeviceFromGroup>>,
  TError,
  { id: string; data: DeviceRemoveFromGroupRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeDeviceFromGroup>>,
    { id: string; data: DeviceRemoveFromGroupRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return removeDeviceFromGroup(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type RemoveDeviceFromGroupMutationResult = NonNullable<Awaited<ReturnType<typeof removeDeviceFromGroup>>>
export type RemoveDeviceFromGroupMutationBody = DeviceRemoveFromGroupRequestDto
export type RemoveDeviceFromGroupMutationError = unknown

export const useRemoveDeviceFromGroup = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeDeviceFromGroup>>,
    TError,
    { id: string; data: DeviceRemoveFromGroupRequestDto },
    TContext
  >
}) => {
  const mutationOptions = getRemoveDeviceFromGroupMutationOptions(options)

  return useMutation(mutationOptions)
}

export const currentDeviceSettings = (id: string, signal?: AbortSignal) => {
  return customAxiosInstance<DeviceSettingsResponseDto>({ url: `/api/devices/${id}/settings`, method: 'GET', signal })
}

export const getCurrentDeviceSettingsQueryKey = (id: string) => {
  return [`/api/devices/${id}/settings`] as const
}

export const getCurrentDeviceSettingsQueryOptions = <
  TData = Awaited<ReturnType<typeof currentDeviceSettings>>,
  TError = unknown,
>(
  id: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof currentDeviceSettings>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCurrentDeviceSettingsQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof currentDeviceSettings>>> = ({ signal }) =>
    currentDeviceSettings(id, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof currentDeviceSettings>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type CurrentDeviceSettingsQueryResult = NonNullable<Awaited<ReturnType<typeof currentDeviceSettings>>>
export type CurrentDeviceSettingsQueryError = unknown

export const useCurrentDeviceSettings = <TData = Awaited<ReturnType<typeof currentDeviceSettings>>, TError = unknown>(
  id: string,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof currentDeviceSettings>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCurrentDeviceSettingsQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const updateDeviceSettings = (id: string, deviceSettingsRequestDto: DeviceSettingsRequestDto) => {
  return customAxiosInstance<DeviceSettingsResponseDto>({
    url: `/api/devices/${id}/settings`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: deviceSettingsRequestDto,
  })
}

export const getUpdateDeviceSettingsMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDeviceSettings>>,
    TError,
    { id: string; data: DeviceSettingsRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateDeviceSettings>>,
  TError,
  { id: string; data: DeviceSettingsRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDeviceSettings>>,
    { id: string; data: DeviceSettingsRequestDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateDeviceSettings(id, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateDeviceSettingsMutationResult = NonNullable<Awaited<ReturnType<typeof updateDeviceSettings>>>
export type UpdateDeviceSettingsMutationBody = DeviceSettingsRequestDto
export type UpdateDeviceSettingsMutationError = unknown

export const useUpdateDeviceSettings = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDeviceSettings>>,
    TError,
    { id: string; data: DeviceSettingsRequestDto },
    TContext
  >
}) => {
  const mutationOptions = getUpdateDeviceSettingsMutationOptions(options)

  return useMutation(mutationOptions)
}

export const createGroup = (groupCreateDto: GroupCreateDto) => {
  return customAxiosInstance<GroupResponseDto>({
    url: `/api/groups`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: groupCreateDto,
  })
}

export const getCreateGroupMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError, { data: GroupCreateDto }, TContext>
}): UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError, { data: GroupCreateDto }, TContext> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createGroup>>, { data: GroupCreateDto }> = (props) => {
    const { data } = props ?? {}

    return createGroup(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateGroupMutationResult = NonNullable<Awaited<ReturnType<typeof createGroup>>>
export type CreateGroupMutationBody = GroupCreateDto
export type CreateGroupMutationError = unknown

export const useCreateGroup = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createGroup>>, TError, { data: GroupCreateDto }, TContext>
}) => {
  const mutationOptions = getCreateGroupMutationOptions(options)

  return useMutation(mutationOptions)
}

export const groupList = (signal?: AbortSignal) => {
  return customAxiosInstance<GroupListResponseDto>({ url: `/api/groups`, method: 'GET', signal })
}

export const getGroupListQueryKey = () => {
  return [`/api/groups`] as const
}

export const getGroupListQueryOptions = <TData = Awaited<ReturnType<typeof groupList>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof groupList>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupListQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupList>>> = ({ signal }) => groupList(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof groupList>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GroupListQueryResult = NonNullable<Awaited<ReturnType<typeof groupList>>>
export type GroupListQueryError = unknown

export const useGroupList = <TData = Awaited<ReturnType<typeof groupList>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof groupList>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGroupListQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const groupDetails = (groupId: number, signal?: AbortSignal) => {
  return customAxiosInstance<GroupWithDevicesResponseDto>({ url: `/api/groups/${groupId}`, method: 'GET', signal })
}

export const getGroupDetailsQueryKey = (groupId: number) => {
  return [`/api/groups/${groupId}`] as const
}

export const getGroupDetailsQueryOptions = <TData = Awaited<ReturnType<typeof groupDetails>>, TError = unknown>(
  groupId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof groupDetails>>, TError, TData>> },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupDetailsQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupDetails>>> = ({ signal }) => groupDetails(groupId, signal)

  return { queryKey, queryFn, enabled: !!groupId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof groupDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GroupDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof groupDetails>>>
export type GroupDetailsQueryError = unknown

export const useGroupDetails = <TData = Awaited<ReturnType<typeof groupDetails>>, TError = unknown>(
  groupId: number,
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof groupDetails>>, TError, TData>> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGroupDetailsQueryOptions(groupId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const controlGroupState = (groupId: number, groupStateRequestDto: GroupStateRequestDto) => {
  return customAxiosInstance<void>({
    url: `/api/groups/${groupId}/state`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: groupStateRequestDto,
  })
}

export const getControlGroupStateMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof controlGroupState>>,
    TError,
    { groupId: number; data: GroupStateRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof controlGroupState>>,
  TError,
  { groupId: number; data: GroupStateRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof controlGroupState>>,
    { groupId: number; data: GroupStateRequestDto }
  > = (props) => {
    const { groupId, data } = props ?? {}

    return controlGroupState(groupId, data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ControlGroupStateMutationResult = NonNullable<Awaited<ReturnType<typeof controlGroupState>>>
export type ControlGroupStateMutationBody = GroupStateRequestDto
export type ControlGroupStateMutationError = unknown

export const useControlGroupState = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof controlGroupState>>,
    TError,
    { groupId: number; data: GroupStateRequestDto },
    TContext
  >
}) => {
  const mutationOptions = getControlGroupStateMutationOptions(options)

  return useMutation(mutationOptions)
}

export const updateLocation = (locationUpdateRequestDto: LocationUpdateRequestDto) => {
  return customAxiosInstance<void>({
    url: `/api/location`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: locationUpdateRequestDto,
  })
}

export const getUpdateLocationMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateLocation>>,
    TError,
    { data: LocationUpdateRequestDto },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateLocation>>,
  TError,
  { data: LocationUpdateRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLocation>>, { data: LocationUpdateRequestDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return updateLocation(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateLocationMutationResult = NonNullable<Awaited<ReturnType<typeof updateLocation>>>
export type UpdateLocationMutationBody = LocationUpdateRequestDto
export type UpdateLocationMutationError = unknown

export const useUpdateLocation = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateLocation>>,
    TError,
    { data: LocationUpdateRequestDto },
    TContext
  >
}) => {
  const mutationOptions = getUpdateLocationMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getLocationData = (signal?: AbortSignal) => {
  return customAxiosInstance<LocationDataResponseDto>({ url: `/api/location`, method: 'GET', signal })
}

export const getGetLocationDataQueryKey = () => {
  return [`/api/location`] as const
}

export const getGetLocationDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocationData>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationData>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetLocationDataQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationData>>> = ({ signal }) => getLocationData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocationData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLocationDataQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationData>>>
export type GetLocationDataQueryError = unknown

export const useGetLocationData = <TData = Awaited<ReturnType<typeof getLocationData>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationData>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

export const streamDeckControllerToggleDevice = (deviceId: string, signal?: AbortSignal) => {
  return customAxiosInstance<void>({ url: `/api/stream-deck/toggle/${deviceId}`, method: 'GET', signal })
}

export const getStreamDeckControllerToggleDeviceQueryKey = (deviceId: string) => {
  return [`/api/stream-deck/toggle/${deviceId}`] as const
}

export const getStreamDeckControllerToggleDeviceQueryOptions = <
  TData = Awaited<ReturnType<typeof streamDeckControllerToggleDevice>>,
  TError = unknown,
>(
  deviceId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof streamDeckControllerToggleDevice>>, TError, TData>>
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStreamDeckControllerToggleDeviceQueryKey(deviceId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof streamDeckControllerToggleDevice>>> = ({ signal }) =>
    streamDeckControllerToggleDevice(deviceId, signal)

  return { queryKey, queryFn, enabled: !!deviceId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof streamDeckControllerToggleDevice>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type StreamDeckControllerToggleDeviceQueryResult = NonNullable<
  Awaited<ReturnType<typeof streamDeckControllerToggleDevice>>
>
export type StreamDeckControllerToggleDeviceQueryError = unknown

export const useStreamDeckControllerToggleDevice = <
  TData = Awaited<ReturnType<typeof streamDeckControllerToggleDevice>>,
  TError = unknown,
>(
  deviceId: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof streamDeckControllerToggleDevice>>, TError, TData>>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getStreamDeckControllerToggleDeviceQueryOptions(deviceId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
