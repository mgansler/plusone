/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 * Elgato API
 * OpenAPI spec version: 0.1
 */
import { z as zod } from 'zod'

export const deviceListResponse = zod.object({
  devices: zod.array(
    zod.object({
      id: zod.string(),
      name: zod.string(),
    }),
  ),
})

export const deviceDetailsParams = zod.object({
  id: zod.string(),
})

export const deviceDetailsResponse = zod.object({
  id: zod.string(),
  name: zod.string(),
  room: zod
    .object({
      id: zod.number(),
      name: zod.string(),
    })
    .nullable(),
  details: zod.object({
    productName: zod.string(),
    displayName: zod.string(),
  }),
  state: zod.object({
    on: zod.boolean(),
  }),
  lastSeen: zod.string().datetime(),
})

export const toggleDeviceParams = zod.object({
  id: zod.string(),
})

export const assignDeviceToRoomParams = zod.object({
  id: zod.string(),
})

export const assignDeviceToRoomBody = zod.object({
  roomId: zod.number(),
})

export const roomListResponse = zod.object({
  rooms: zod.array(
    zod.object({
      id: zod.number(),
      name: zod.string(),
    }),
  ),
})

export const createRoomBody = zod.object({
  name: zod.string(),
})

export const roomDetailsParams = zod.object({
  roomId: zod.number(),
})

export const roomDetailsResponse = zod.object({
  id: zod.number(),
  name: zod.string(),
  devices: zod.array(
    zod.object({
      id: zod.string(),
      name: zod.string(),
      room: zod
        .object({
          id: zod.number(),
          name: zod.string(),
        })
        .nullable(),
      details: zod.object({
        productName: zod.string(),
        displayName: zod.string(),
      }),
      state: zod.object({
        on: zod.boolean(),
      }),
      lastSeen: zod.string().datetime(),
    }),
  ),
})

export const controlRoomStateParams = zod.object({
  roomId: zod.number(),
})

export const controlRoomStateBody = zod.object({
  desiredPowerState: zod.enum(['on', 'off']),
})
