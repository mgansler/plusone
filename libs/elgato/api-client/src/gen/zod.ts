/**
 * Generated by orval v7.11.1 üç∫
 * Do not edit manually.
 * Elgato API
 * OpenAPI spec version: 0.1
 */
import { z as zod } from 'zod'

export const discoveredDevicesResponse = zod.strictObject({
  devices: zod.array(
    zod.strictObject({
      id: zod.string().describe('The mac address of the device.'),
      macAddress: zod.string(),
      name: zod.string(),
      fqdn: zod.string(),
      host: zod.string(),
      ipv4: zod.string().nullish(),
      port: zod.number(),
      displayName: zod.string(),
      productName: zod.string(),
      type: zod.enum(['RingLight', 'LightStrip', 'Unknown']),
      isControlled: zod.boolean(),
    }),
  ),
})

export const deviceListResponse = zod.strictObject({
  devices: zod.array(
    zod.strictObject({
      macAddress: zod.string().describe('The unique id for the device is its mac address.'),
      displayName: zod.string(),
    }),
  ),
})

export const deviceDetailsResponse = zod.strictObject({
  macAddress: zod.string().describe('The unique id for the device is its mac address.'),
  displayName: zod.string(),
  details: zod.strictObject({
    productName: zod.string(),
    deviceType: zod.enum(['RingLight', 'LightStrip', 'Unknown']),
    displayName: zod.string(),
  }),
  state: zod.strictObject({
    on: zod.boolean(),
    hue: zod.number().nullish(),
    saturation: zod.number().nullish(),
    brightness: zod.number().nullish(),
    temperature: zod.number().nullish(),
  }),
  lastSeen: zod.iso.datetime({}).nullable(),
})

export const currentDeviceSettingsResponse = zod.strictObject({
  sunrise: zod.boolean(),
  sunset: zod.boolean(),
})

export const updateDeviceSettingsResponse = zod.strictObject({
  sunrise: zod.boolean(),
  sunset: zod.boolean(),
})

export const getHealthStatusResponse = zod.strictObject({
  status: zod.string().optional(),
  info: zod
    .record(
      zod.string(),
      zod.strictObject({
        status: zod.string(),
      }),
    )
    .nullish(),
  error: zod
    .record(
      zod.string(),
      zod.strictObject({
        status: zod.string(),
      }),
    )
    .nullish(),
  details: zod
    .record(
      zod.string(),
      zod.strictObject({
        status: zod.string(),
      }),
    )
    .optional(),
})

export const currentLocationResponse = zod.strictObject({
  longitude: zod.number(),
  latitude: zod.number(),
  name: zod.string(),
})

export const getLocationDataResponse = zod.strictObject({
  longitude: zod.number(),
  latitude: zod.number(),
  name: zod.string(),
  sunrise: zod.iso.datetime({}),
  sunset: zod.iso.datetime({}),
  firstLight: zod.iso.datetime({}).nullable(),
  lastLight: zod.iso.datetime({}).nullable(),
  dawn: zod.iso.datetime({}),
  dusk: zod.iso.datetime({}),
  solarNoon: zod.iso.datetime({}),
  goldenHour: zod.iso.datetime({}),
  dayLength: zod.number().describe('Time between sunrise and sunset in seconds.'),
  timeZone: zod.string(),
  utcOffset: zod.number(),
})

export const getCommandsResponse = zod.strictObject({
  commands: zod.array(
    zod.strictObject({
      name: zod.string(),
      actions: zod.array(
        zod.strictObject({
          on: zod.boolean(),
          hue: zod.number().nullish(),
          saturation: zod.number().nullish(),
          brightness: zod.number().nullish(),
          temperature: zod.number().nullish(),
          powerOnly: zod.boolean(),
          macAddress: zod.string(),
          id: zod.number(),
          commandId: zod.number(),
        }),
      ),
      id: zod.number(),
      hash: zod.string(),
    }),
  ),
})

export const getCommandResponse = zod.strictObject({
  name: zod.string(),
  actions: zod.array(
    zod.strictObject({
      on: zod.boolean(),
      hue: zod.number().nullish(),
      saturation: zod.number().nullish(),
      brightness: zod.number().nullish(),
      temperature: zod.number().nullish(),
      powerOnly: zod.boolean(),
      macAddress: zod.string(),
      id: zod.number(),
      commandId: zod.number(),
    }),
  ),
  id: zod.number(),
  hash: zod.string(),
})
