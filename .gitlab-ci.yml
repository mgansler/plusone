image: node:20.10.0

variables:
  GIT_DEPTH: 0

stages:
  - test
  - build
  - package
  - deploy

.distributed:
  interruptible: true
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: on_success
  before_script:
    - yarn install --frozen-lockfile
    - NX_HEAD=$CI_COMMIT_SHA
    - NX_BASE=${CI_MERGE_REQUEST_DIFF_BASE_SHA:-$CI_COMMIT_BEFORE_SHA}
  retry: 2

.dind:
  services:
    - docker:dind
  variables:
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_TLS_CERTDIR: ''
    DOCKER_DRIVER: overlay2
  before_script:
    - !reference [.distributed, before_script]
    - sh tools/scripts/install-docker-debian.sh

migrations-check:
  stage: test
  extends:
    - .distributed
  rules:
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\/.*$/
      when: always
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME !~ /^renovate\/.*$/
      when: manual
  before_script:
    - !reference [.distributed, before_script]
    - apt-get update && apt-get install -y jq
  script:
    - echo Based of nx version $(git show ${NX_BASE}:package.json|jq -r '.devDependencies.nx')
    - time npx nx migrate latest --from nx@$(git show ${NX_BASE}:package.json|jq -r '.devDependencies.nx')
    - if [[ -f migration.json ]] ; then echo "Cancelling this update because it has migrations" ; cat migrations.json ; exit 1 ; fi
  after_script:
    - git status

api-client-check:
  stage: test
  extends:
    - .distributed
    - .dind
  variables:
    FEEDS_DATABASE_URL: postgres://postgres:local_db_password@docker:5434/feeds
  script:
    - time npx nx run-many --target generate-api-spec --all
    - time npx nx run-many --target generate-api-client --all
    - git diff --quiet # This will have a non-zero exit code when a file is modified
  after_script:
    - git status

format-check:
  stage: test
  extends:
    - .distributed
  script:
    - time npx nx format:check --base=$NX_BASE --head=$NX_HEAD

lint:
  stage: test
  extends:
    - .distributed
  script:
    - time npx nx affected --base=$NX_BASE --head=$NX_HEAD -t lint --parallel=8

test:
  stage: test
  extends:
    - .distributed
  script:
    - time npx nx affected --base=$NX_BASE --head=$NX_HEAD -t test --parallel=8 --configuration=ci
  after_script:
    - yarn jrm ./reports/test.xml "./reports/test/*.xml"
  artifacts:
    when: always
    paths:
      - reports/test.xml
    reports:
      junit: reports/test.xml
    expire_in: 2 weeks

component-test:
  stage: test
  extends:
    - .distributed
  before_script:
    - !reference [.distributed, before_script]
    - sh tools/scripts/install-cypress-dependencies.sh
  script:
    - time npx nx affected --base=$NX_BASE --head=$NX_HEAD -t component-test --parallel=1 --configuration=ci --browser chrome
  after_script:
    - yarn jrm ./reports/component-test.xml "./reports/component-test/*.xml"
  artifacts:
    when: always
    paths:
      - reports/component-test.xml
    reports:
      junit: reports/component-test.xml
    expire_in: 2 weeks

e2e:
  stage: test
  extends:
    - .distributed
    - .dind
  needs:
    - format-check
    - lint
    - test
  variables:
    FEEDS_DATABASE_URL: postgres://postgres:local_db_password@docker:5434/feeds
  before_script:
    - !reference [.dind, before_script]
    - sh tools/scripts/install-cypress-dependencies.sh
  script:
    - time npx nx affected --base=$NX_BASE --head=$NX_HEAD -t e2e --parallel=1 --configuration=ci --browser chrome
  after_script:
    - yarn jrm ./reports/e2e.xml "./reports/e2e/*.xml"
  artifacts:
    when: always
    paths:
      - reports/e2e.xml
    reports:
      junit: reports/e2e.xml
    expire_in: 2 weeks

build:
  stage: build
  extends:
    - .distributed
  needs:
    - format-check
    - lint
    - test
    - component-test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      # We do not need to run this on the main branch as package runs build on its own.
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      # We want this job for merge requests because sometime this fails even though lint is happy
      when: on_success
  script:
    - time npx nx affected --base=$NX_BASE --head=$NX_HEAD -t build --parallel=8

package:
  stage: package
  extends:
    - .distributed
    - .dind
  needs:
    - format-check
    - lint
    - test
    - component-test
    - e2e
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME !~ /^renovate\/.*$/
      when: manual
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate\/.*$/
      when: never
  script:
    - docker login -u "gitlab-ci-token" -p "${CI_JOB_TOKEN}" ${CI_REGISTRY}
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t package --parallel=1 --configuration=ci
  artifacts:
    paths:
      - dist/apps
    expire_in: 1 hour

.deploy:
  needs:
    - package
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME !~ /^renovate\/.*$/
      when: manual
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^renovate/
      when: never
  before_script:
    - source ~/.nvm/nvm.sh
    - yarn install --frozen-lockfile
    - NX_HEAD=$CI_COMMIT_SHA
    - NX_BASE=${CI_MERGE_REQUEST_DIFF_BASE_SHA:-$CI_COMMIT_BEFORE_SHA}
    - docker login -u "gitlab-ci-token" -p "${CI_JOB_TOKEN}" ${CI_REGISTRY}

deploy-on-nas:
  stage: deploy
  extends:
    - .deploy
  tags:
    - elgato
  script:
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t deploy --parallel=1 --configuration=ci --exclude='*,!tag:nas'
  retry: 2 # DNS sometimes fails but we can safely retry

deploy-on-server:
  stage: deploy
  extends:
    - .deploy
  tags:
    - deploy
  script:
    - npx nx affected --base=$NX_BASE --head=$NX_HEAD -t deploy --parallel=1 --configuration=ci --exclude='tag:nas'
